import numpy as np
from mdp import MDP
from tmis import TMIS2
from algs import *
H = 5	
S = 2
A = 2

N = 50000

np.random.seed(0)

which_model = np.random.randint(0, 2, H)
r = np.random.choice([1/4,1/2,3/4,1], (H, S, A))
# print(r)

Pa = np.array([[[1, 0],[3/4, 1/4]], [[0, 1], [1/2, 1/2]]])
Pb = np.array([[[1, 0],[1/2, 1/2]], [[0, 1], [1/4, 3/4]]])

P = np.array([Pa if which_model[i] else Pb for i in range(0, H)])

pi = np.array([[0, 1] for i in range(0, H)])

M = MDP(H, S, A, P, r, [1/2, 1/2])


# Gather UCB-adaptive data #

print("running ucbvi -----")
F_ucb = ucbvi(M, N, .01, readData = False, writeData = False, readFrom = "ucbvi_10_000", saveTo = "ucbvi_10_000")

D_ucb = F_ucb[0]
Pi_ucb = F_ucb[1]

###########################

# Gather shadow data #
print("gathering shadow data using ucbvi pols ----")
D_shadow = M.rollout_multipol(Pi_ucb, np.ones(len(Pi_ucb)), readData = False, writeData = False, readFrom = "ucbvi_sh_10_000", saveTo = "ucbvi_sh_10_000")
print(D_shadow)

###########################
import matplotlib.pyplot as plt

pi = np.array([[1, 1] for i in range(0, H)])

# print("pi = ", pi)
# pi = np.random.randint(0, 2, (M.H, M.S))

vpi = M.evaluate(pi)

adaptive_estimates = []
shadow_estimates = []

# y_ad = list(np.load("adaptive.npy"))
# y_sh = list(np.load("shadow.npy"))
y_ad = []
y_sh = []
print("forming estimates")

tmis_ucb = TMIS2(D_ucb, H, S, A, r)
tmis_shadow = TMIS2(D_shadow, H, S, A, r)
vhat_ucb  = 0

M = N
for n in range(len(y_ad) + 1, M):
	if n % 100 == 0:
		print("n = ", n)
		# print("vhat_ucb = ", vhat_ucb)

	vhat_ucb = tmis_ucb.evaluate(pi, n)
	vhat_sh = tmis_shadow.evaluate(pi, n)
	# print("vhat_ucb ", vhat_ucb)
# 	adaptive_estimates.append(vhat_ucb)
# 	shadow_estimates.append(vhat_sh)
	y_ad.append((vpi - vhat_ucb))
	y_sh.append((vpi - vhat_sh))

# print("min nhsa = ", np.amin(tmis_ucb.nhsa[n]))
print("Phat = ", tmis_ucb.calc_Phat(n))
# print(len(y_ad))
# np.save("adaptive", np.array(y_ad))
# np.save("shadow", np.array(y_sh))
# plt.rcParams["text.usetex"] = True
plot_step = 5
plt.plot(np.arange(1,M)[::plot_step], np.zeros(len(y_ad))[::plot_step])
plt.plot(np.arange(1, M)[::plot_step], y_ad[::plot_step], label = "adaptive")
plt.plot(np.arange(1, M)[::plot_step], y_sh[::plot_step], label = "shadow dataset")
plt.title("Performance of TMIS estimator with Adaptivity Generated by UCB-VI")
plt.ylabel("$\hat{v}^\pi - v^\pi$")
plt.xlabel("n")
plt.legend()

plt.show()








